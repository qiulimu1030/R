head(iris)
head(iris)
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length))
ggplot(data = mpg) +
geom_point(mapping = aes(x = cty,y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = cty,y = hwy))+
xlab("City Miles per Gallon")+
ylab("Highway Miles per Gallon")+
ggtitle("Scatter Plot: City vs. Highway MPG")
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length))
ggplot(data = mpg) +
geom_point(mapping = aes(x = cty,y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = cty,y = hwy))+
xlab("City Miles per Gallon")+
ylab("Highway Miles per Gallon")+
ggtitle("Scatter Plot: City vs. Highway MPG")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species))
ggplot(data = mpg) +
geom_point(mapping = aes(x = cty,y = hwy))+
xlab("City Miles per Gallon")+
ylab("Highway Miles per Gallon")+
ggtitle("Scatter Plot: City vs. Highway MPG")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,y = hwy),color = 'blue',shape = 15)
ggplot(data = mpg) +
geom_point(mapping = aes(x= displ,y = hwy,color = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x= displ,y = hwy,size = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class, color = class))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ,y = hwy,color = displ<5))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ,y = hwy))  #rounds so points are on a grid, need random noise
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ,y = hwy),position = "jitter")
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = jitter)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ,y = hwy))  #rounds so points are on a grid, need random noise
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ,y = hwy),position = "jitter")
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")
ggplot(data = iris)+
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")
ggplot(data = iris)+
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(position = "jitter", color = "black", aes(Petal.Width + 0.6))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(position = "jitter", color = "black", aes(Petal.Width + 0.6, Petal.Length + 1.8))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(position = "jitter", color = "black", aes(Petal.Width = 0.6, Petal.Length + 1.8))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(position = "jitter", color = "black", aes(Petal.Width = 0.6, Petal.Length = 1.8))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(position = "jitter", color = "black", aes(Petal.Width + 0.6, Petal.Length + 1.5))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(position = "jitter", color = "black", aes(Petal.Width + 0.6, Petal.Length + ))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(position = "jitter", color = "black", aes(Petal.Width + 0.6, Petal.Length + 1))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")
iris$Species
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(position = "jitter", color = "black", aes(Species = "setosa", Petal.Width + 0.6, Petal.Length + 1))
d <- data.frame(x = c(102856,17906,89697,74384,91081,52457,73749,29910,75604,28267,122136, 54210,48925,58937,76281,67789,69138,18026,90806,44893), y = c(2818, 234, 2728, 2393, 2893, 1015, 1403, 791, 2243, 596, 2468, 1495, 1232, 1746, 2410, 1791, 1706, 259, 1982, 836), names = c("A","C","E","D","G","F","I","H","K","M","L","N","Q","P","S","R","T","W","V","Y"))
ggplot(d, aes(x,y)) + geom_point() + geom_text(aes(label=names))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(position = "jitter", color = "black", aes(Species = "setosa", Petal.Width + 0.6, Petal.Length + 1))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(position = "jitter", color = "black", aes(Species = "setosa", Petal.Width + 0.6, Petal.Length - 2))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(position = "jitter", color = "black", aes(Species = "setosa", Petal.Width + 0.6, Petal.Length + 2))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(color = "black", aes(Petal.Width > 0.6, Petal.Length < 2))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(color = "black", aes(Petal.Width + 0.6, Petal.Length - 2))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(color = "black"(Petal.Width > 0.6))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(color = ifelse(Petal.Width > 0.6))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(color = ifelse(Petal.Width > 0.6, "red", "blue"))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(color = ifelse(iris$Petal.Width > 0.6, "red", "blue"))
ggplot(data = iris, aes(aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")) +
geom_point(color = ifelse(iris$Petal.Width > 0.6, "red", "blue"))
geom_point(color = ifelse(iris$Petal.Width > 0.6, "red", "blue"))
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_point(outlier.size = 0.6)
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")+
geom_jitter()
ggplot(data = iris) +
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")
ggplot(data = iris) +
geom_jitter(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut))
#bar chart
ggplot(data = mpg)+
geom_bar(mapping = aes(x=class))
ggplot(data = iris)+
geom_bar(mapping = (x = Species))
ggplot(data = iris)+
geom_bar(mapping = aes(x = Species))
ggplot(data = iris)+
geom_bar(mapping = aes(x = Petal.Length))
ggplot(data = mpg)+
geom_line(mapping = aes(x=displ,y=hwy,color = class))
#bar chart
ggplot(data = mpg)+
geom_bar(mapping = aes(x=class))
mpg_counts <- data.frame(table(mpg$class))
names(mpg_counts)=c("class","counts")
ggplot(data = mpg_counts)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts),stat="identity")
#Make each bar a different color
ggplot(data = mpg_counts)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts,fill = class),stat="identity")
mpg_counts_ordered<-mpg_counts[order(mpg_counts$counts,decreasing = TRUE),]
ggplot(data = mpg_counts_ordered)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts),stat="identity",
fill = c("blue","blue","light blue","light blue","light blue","light blue","light blue"))
ggplot(data = mpg_counts_ordered)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts),stat="identity",
color = c("blue","blue","light blue","light blue","light blue","light blue","light blue"))
ggplot(data = mpg)+
geom_boxplot(mapping = aes(y=hwy))
mpg_counts <- data.frame(table(mpg$class))
names(mpg_counts)=c("class","counts")
ggplot(data = mpg_counts)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts),stat="identity")
mpg_counts
mpg$class
####
iris_counts <- data.frame(table(iris$Species))
iris_counts
names(iris_counts)=c("species","counts")
ggplot(data = mpg_counts)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts),stat="identity")
ggplot(data = iris_counts)+
geom_bar(mapping = aes(x=reorder(species, -counts),y=counts),stat="identity")
#Make each bar a different color
ggplot(data = mpg_counts)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts,fill = class),stat="identity")
iris$Species
iris[Species]
iris[iris$Species, Petal.Length < 6]
iris[iris$Petal.Length < 6]
mpg
mpg_continuous_suv
iris[iris$Species, c("Petal.Length")]
iris$Petal.Length
iris$Petal.Length < 6
a <- iris[iris$Species, c("Petal.Length")]
a
a <- iris[, iris$Species, c("Petal.Length")]
a
mpg_continuous_only
mpg_continuous_suv
a <- iris[, c("Petal.Length")]
a
a <- iris[iris$Species, c("Petal.Length")]
a
a <- iris[iris$Species = "setosa", c("Petal.Length")]
a <- iris[iris$Species = c("setosa"), c("Petal.Length")]
a <- iris[iris$Species =- c("setosa"), c("Petal.Length")]
a <- iris[iris$Species == c("setosa"), c("Petal.Length")]
a
iris_continuous_setosa
iris_setosa_pl <- iris_continuous_setosa[, "Petal.Length"]
iris_setosa_pl
length(iris_setosa_pl)
iris_setosa_pl <- iris_continuous_setosa[, "Petal.Length" < 6]
length(iris_setosa_pl)
iris_setosa_pl <- iris_continuous_setosa[, "Petal.Length"]
length(iris_setosa_pl)
iris[which(iris$Petal.Width < 6), ]
new_iris <- iris[which(iris$Petal.Width < 6), ]
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Petal.Length))
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species))
nrow(iris)
nrow(new_iris)
new_iris <- iris[which(iris$Petal.Width < 6), ]
nrow(new_iris)
iris$Petal.Width
max(iris$Petal.Width)
new_iris <- iris[which(iris$Petal.Length < 6), ]
len(new_iris)
length(new_iris)
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species))
new_iris <- iris[which(iris$Petal.Length < 6), ]
length(new_iris)
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species))
iris$Petal.Length
order(iris$Petal.Length)
ggplot(data = iris_counts)+
geom_bar(mapping = aes(x=reorder(species, -counts),y=counts),stat="identity")
sort(iris$Petal.Length)
iris[which(iris$Petal.Length >= 6), ]
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species))
new_iris <- iris[which(iris$Petal.Length < 6), ]
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species))
new_iris <- iris[which(iris$Speal.Length < 6), ]
length(new_iris)
[which(iris$Speal.Length < 6), ]
iris[which(iris$Speal.Length < 6), ]
iris[which(iris$Speal.Length < 6), ]
length(new_iris)
sort(iris$Sepal.Length)
new_iris <- iris[which(iris$Speal.Length < 6), ]
new_iris
new_iris <- iris[which(iris$Sepal.Length < 6), ]
iris[which(iris$Sepal.Length < 6), ]
new_iris
rm(new_iris)
new_iris <- iris[which(iris$Sepal.Length < 6), ]
new_iris
length(new_iris)
nrow(new_iris)
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species))
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species))
new_iris <- iris[which(iris$Sepal.Length < 6), ]
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species))
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species, color = Species))
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species, fill = Species))
ggplot(data = mpg)+
geom_line(mapping = aes(x=displ,y=hwy,color = class))
#bar chart
ggplot(data = mpg)+
geom_bar(mapping = aes(x=class))
#for reordered chart, similar to R Base reordered, we need to first summarize the data then plot it using the parameter
#stat = "identity" which means just plot the value from the dataframe rather than counting records
mpg_counts <- data.frame(table(mpg$class))
names(mpg_counts)=c("class","counts")
mpg_counts <- aggregate.data.frame(iris$Petal.Length,by=list(iris$Species),FUN = "sum")
ggplot(data = mpg_counts)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts),stat="identity")
#Make each bar a different color
ggplot(data = mpg_counts)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts,fill = class),stat="identity")
#bar chart
ggplot(data = mpg)+
geom_bar(mapping = aes(x=class))
mpg_counts <- data.frame(table(mpg$class))
names(mpg_counts)=c("class","counts")
ggplot(data = mpg_counts)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts),stat="identity")
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species, fill = Species))+
geom_text(aes(label=Species), vjust=0)
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species, fill = Species))
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species, fill = Species))+
geom_text(aes(label=count), vjust=0)
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species, fill = Species))
#Make each bar a different color
ggplot(data = mpg_counts)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts,fill = class),stat="identity")
mpg_counts_ordered<-mpg_counts[order(mpg_counts$counts,decreasing = TRUE),]
ggplot(data = mpg_counts_ordered)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts),stat="identity",
fill = c("blue","blue","light blue","light blue","light blue","light blue","light blue"))
ggplot(data = mpg_counts_ordered)+
geom_bar(mapping = aes(x=reorder(class, -counts),y=counts),stat="identity",
color = c("blue","blue","light blue","light blue","light blue","light blue","light blue"))
ggplot(data = mpg)+
geom_boxplot(mapping = aes(y=hwy))
#Create a boxplot by class
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x=class,y=hwy))
ggplot(data = mpg)+
geom_histogram(mapping = aes(x=hwy),binwidth=1)
ggplot(data = mpg)+
geom_histogram(mapping = aes(x=hwy),binwidth=10)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut,fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut,fill = clarity))
ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut,fill = clarity),position = "fill")
new_iris[which == "Setosa"]
new_iris[which == "setosa"]
new_iris[which(new_iris$Species == "setosa"]
new_iris[which(new_iris$Species == "setosa")]
new_iris
new_iris[which(new_iris$Species == "setosa"),]
nrow(new_iris[which(new_iris$Species == "setosa"),])
levels(new_iris$Species)
nrow(new_iris[which(new_iris$Species == "versicolor"),])
nrow(new_iris[which(new_iris$Species == "virginica"),])
*Answer the following: What are the count of observations by species in your graph above*
nrow(new_iris[which(new_iris$Species == "setosa"),]) # 50
nrow(new_iris[which(new_iris$Species == "versicolor"),]) # 26
nrow(new_iris[which(new_iris$Species == "virginica"),]) # 7
*Answer the following: What are the count of observations by species in your graph above*
nrow(new_iris[which(new_iris$Species == "setosa"),]) # 50
nrow(new_iris[which(new_iris$Species == "versicolor"),]) # 26
nrow(new_iris[which(new_iris$Species == "virginica"),]) # 7
knitr::opts_chunk$set(echo = TRUE)
plot_correlation(iris, type = c("continuous"))
library(datasets)
data(iris)
summary(iris)
iris_continuous_setosa <- iris[iris$Species == "setosa", c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]
iris_continuous_versicolor <- iris[iris$Species == "versicolor", c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]
iris_continuous_virginica <- iris[iris$Species == "virginica", c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]
plot_correlation(iris_continuous_setosa)
plot_correlation(iris_continuous_versicolor)
plot_correlation(iris_continuous_virginica)
ggplot(data = iris)+
geom_boxplot(mapping = aes(x = Species, y = Petal.Length, fill = Species))
ggplot(data = iris)+
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species))
ggplot(data = iris)+
geom_point(mapping = aes(x = Petal.Width, y = Petal.Length, color = Species), position = "jitter")
new_iris <- iris[which(iris$Sepal.Length < 6), ]
ggplot(data = new_iris)+
geom_bar(mapping = aes(x = Species, fill = Species))
plot_correlation(iris, type = "continuous""))
plot_correlation(iris, type = "continuous"")
plot_correlation(iris, type = "continuous")
iris_continuous_only <- iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]
plot_correlation(iris_continuous_only)
```{r step2, echo=false}
plot_correlation(iris_continuous_only)
```{r step2, echo=FALSE}
iris_continuous_only <- iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]
plot_correlation(iris_continuous_only)
library(ggplot2)
library(DataExplorer)
plot_correlation(iris, type = c("continuous"))
plot_correlation(iris_continuous_only)
plot_correlation(iris, type = c("continuous"))
# Install & Load
install.packages("factoextra")
install.packages("NbClust")
install.packages("party")
install.packages("randomForest")
install.packages("dbscan")
install.packages("fpc")
install.packages("glmnet")
library("glmnet")
library("party")
library("MASS")
library("ggplot2")
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.table("bj.csv", head=TRUE, sep=",")
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.table("bj.csv", head=TRUE, sep=",")
getwd()
setwd("Users/zack/Desktop/Code/R/ALY6040")
setwd("Users/zack/Desktop/Code/R/ALY 6040")
setwd("/Users/zack/Desktop/Code/R/ALY 6040")
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.table("bj.csv", head=TRUE, sep=",")
# bj.raw is the raw data.
bj.raw
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.table("bj.csv", head=TRUE, sep=",")
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.csv("bj.csv", head=TRUE, sep=",")
# bj.raw is the raw data.
bj.raw
# bj.raw is the raw data.
bj.raw
bj.raw <- read.csv("bj.csv")
bj.raw <- read.csv("bj.csv")[, 2]
bj.raw <- read.csv("bj.csv")
# bj.raw is the raw data.
bj.raw
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.csv("bj.csv", head=TRUE, sep=",")
# bj.raw is the raw data.
bj.raw
nrow(bj.raw)
ncol(bj.raw)
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.csv("bj.csv", head=TRUE, sep=",")
nrow(bj.raw)
ncol(bj.raw)
bj.raw <- read.csv("bj.csv")
nrow(bj.raw)
ncol(bj.raw)
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.csv("bj.csv")
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.csv("bj.csv")
Housing.original <- read.table("bj.csv", head=TRUE, sep=",") # The working diriction maybe changed
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.csv("bj.csv")
# bj.raw is the raw data.
bj.raw
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.csv("bj.csv")
# bj.raw is the raw data.
bj.raw
# Make sure the raw data and the program are in the same working direction.
bj.raw <- read.csv("bj.csv")
# bj.raw is the raw data.
bj.raw
####################################
# Data Preprocessing - Danlin Shen #
####################################
# 1. Convert all of the data: All of the matrix will be standardized to have unit L1 norm in each column and
# zero mean. L1 norm is uesd for Lasso and descision tree.
bj.norm <- apply(bj.raw, 2, function(x) scale(x, center = T, scale = T)/norm(scale(x, center = T, scale = T), "1"))
bj.norm # bj.norm is the data have been standardized to have unit L1 norm in each column and zero mean.
plot_correlation(bj.nom)
plot_correlation(bj.norm)
bj.raw$price
boxplot(bj.raw$price)
bj.raw
range(bj.raw$district)
boxplot(price)
# 2. Add the discription of the price
price <- bj.raw$price
summary(price) # Find out the minmum, the 1st quantile, the median, the mean, the 3
boxplot(price)
ggplot(data = bj.raw)+
geom_boxplot(mapping = aes(y = price))
boxplot(price)
ggplot(data = bj.raw)+
geom_boxplot(mapping = aes(y = price))
ggplot(data = bj.raw)+
geom_boxplot(mapping = aes(y = price))+
geom_point(mapping = aes(y=Price))
summary(price) # Find out the minmum, the 1st quantile, the median, the mean, the 3
boxplot(price)
# Description: Classify Beijing's house prices according to the price quartiles.
# Testing
for (i in 1:100) {
if (price[i] < 42752) {cat(i, ":", price[i], "Poor","\n")}
if (42752 <= price[i] & price[i]  < 54761) {cat(i, ":", price[i], "Cheap","\n")}
if (54761 <= price[i] & price[i]  < 59666) {cat(i, ":", price[i], "Medium","\n")}
if (59666 <= price[i] & price[i]  < 71180) {cat(i, ":", price[i], "Expensive","\n")}
if (71180 <= price[i]) {cat(i, ":", price[i], "Luxary","\n")}
}
head(bj.raw)
plot_correlation(bj.raw)
plot_correlation(bj.norm)
